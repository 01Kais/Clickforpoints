<!DOCTYPE html>
<html lang="fr">
<head>
<meta charset="UTF-8" />
<meta name="viewport" content="width=device-width, initial-scale=1" />
<title>ClickForPoints - Jeu Clicker Complet</title>
<script src="https://www.paypal.com/sdk/js?client-id=YOUR_CLIENT_ID&currency=EUR"></script>
<style>
  body {
    font-family: Arial, sans-serif;
    background: linear-gradient(135deg,#89f7fe 0%,#66a6ff 100%);
    color: #222;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin: 0;
    padding: 20px;
    transition: background 0.5s ease;
  }
  #score, #upgrade-info {
    font-size: 1.5em;
    margin: 10px 0;
    user-select: none;
  }
  #click-value {
    display: none;
  }
  .buttons-container {
    display: flex;
    gap: 10px;
    flex-wrap: wrap;
    justify-content: center;
    margin: 15px 0 30px 0;
  }
  #click-button {
    font-size: 1.8em;
    color: #222;
    background-color: #bbb;
    width: 150px;
    height: 150px;
    border-radius: 15px;
    border: 2px solid #444;
    cursor: pointer;
    user-select: none;
    display: flex;
    justify-content: center;
    align-items: center;
    text-align: center;
    font-weight: bold;
    margin: 10px auto 30px auto;
    transition: background-color 0.3s ease;
  }
  .press-animate {
    animation: pressEffect 150ms ease;
  }
  @keyframes pressEffect {
    0% {
      transform: scale(1);
    }
    50% {
      transform: scale(0.9);
    }
    100% {
      transform: scale(1);
    }
  }
  .chest-button {
    width: 90px;
    height: 90px;
    border-radius: 12px;
    font-weight: bold;
    font-size: 1.8em;
    border: 2px solid #666;
    cursor: pointer;
    user-select: none;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: background-color 0.3s ease;
    color: #333;
    background: #999;
    text-align: center;
    margin: 5px;
  }
  .chest-gray {
    background: linear-gradient(145deg, #bbb, #888);
    border-color: #666;
    color: #444;
  }
  .chest-green {
    background: #27ae60;
    color: white;
    border-color: #1e8449;
    font-size: 3em;
  }
  .chest-blue {
    background: #2980b9;
    color: white;
    border-color: #21618c;
  }
  .chest-purple {
    background: #8e44ad;
    color: white;
    border-color: #6c3483;
  }
  .chest-gold {
    background: #f1c40f;
    color: black;
    border-color: #b7950b;
  }
  #upgrade-button {
    font-size: 1.8em;
    padding: 15px 40px;
    border-radius: 10px;
    background-color: #4CAF50;
    color: white;
    border: none;
    cursor: pointer;
    margin: 10px 0 30px 0;
  }
  #status {
    font-weight: bold;
    margin-bottom: 20px;
    min-height: 24px;
  }
  #paypal-button-container {
    margin-top: 15px;
    width: 320px;
  }
  #leaderboard {
    width: 300px;
    background: white;
    color: black;
    border-radius: 8px;
    padding: 15px;
    box-shadow: 0 4px 10px rgba(0,0,0,0.3);
    margin-top: 20px;
  }
  #leaderboard h2 {
    margin-top: 0;
    text-align: center;
  }
  #leaderboard ul {
    list-style: none;
    padding-left: 10px;
  }
  #leaderboard li {
    padding: 6px 0;
    border-bottom: 1px solid #ddd;
    font-weight: bold;
  }
  #reset-leaderboard {
    margin-top: 10px;
    width: 100%;
    background-color: #e74c3c;
    border: none;
    color: white;
    padding: 10px 0;
    border-radius: 6px;
    cursor: pointer;
    font-size: 1em;
  }
  #reset-leaderboard:hover {
    background-color: #c0392b;
  }
  #tutorial-toggle {
    cursor: pointer;
    font-weight: bold;
    font-size: 1.6em;
    color: #444;
    user-select: none;
    margin-bottom: 15px;
    text-align:center;
  }
  #tutorial-toggle:hover {
    color: #000;
  }
  #tutorial {
    display: none;
    max-width: 600px;
    background: white;
    color: #222;
    border-radius: 10px;
    padding: 15px;
    box-shadow: 0 4px 15px rgba(0,0,0,0.3);
    margin-bottom: 30px;
    font-size: 1em;
    line-height: 1.4em;
  }
</style>
</head>
<body>
<div id="score">Points: 0</div>
<div id="click-value">Valeur du clic: 1</div>
<div id="upgrade-info">Am√©lioration: co√ªt 100 points (niveau 1, multiplicateur x5)</div>
<button id="click-button" title="Clique pour gagner">+1 pts</button>
<button id="upgrade-button">Acheter am√©lioration</button>
<div id="status"></div>
<div class="buttons-container" id="chests-container"></div>
<div class="buttons-container" id="shop-container"></div>
<div id="paypal-button-container"></div>
<div id="tutorial-toggle" title="Afficher / cacher le tutoriel">‚ùì</div>
<div id="tutorial">
  <h3>Tutoriel du jeu</h3>
  <p>Bienvenue dans le jeu ClickForPoints ! Voici les points cl√©s : </p>
  <ul>
    <li>Clique sur le coffre gris toutes les 8 heures pour obtenir un bouton color√©.</li>
    <li>Le bouton obtenu te permet de gagner des points √† chaque clic.</li>
    <li>Achete des coffres sp√©ciaux en boutique pour des bonus comme des √©mojis, sons, ou multiplicateurs.</li>
    <li>Tu peux acheter un g√©n√©rateur automatique via PayPal (5 ‚Ç¨) qui ajoute 5 points par minute.</li>
    <li>Le g√©n√©rateur peut √™tre am√©lior√© gratuitement tous les 3 jours pour augmenter sa production.</li>
    <li>Ach√®te un auto-clicker via PayPal (3 ‚Ç¨) : en maintenant appuy√© sur le bouton, il clique 5 fois par seconde pendant 1 semaine, avec un multiplicateur x2.</li>
    <li>Utilise les am√©liorations pour multiplier tes points par clic.</li>
    <li>Consulte le classement local pour voir tes meilleurs scores. Tu peux le r√©initialiser √† tout moment.</li>
    <li>Utilise les codes promo disponibles pour obtenir des bonus uniques.</li>
  </ul>
</div>
<div id="leaderboard">
  <h2>Classement local</h2>
  <ul id="leaderboard-list"></ul>
  <button id="reset-leaderboard">R√©initialiser classement</button>
</div>
<div style="margin: 20px auto; max-width: 320px; text-align: center;">
  <input type="text" id="promo-code-input" placeholder="Entrez code promo" style="width: 60%; padding: 8px; border-radius: 6px; border: 1px solid #ccc;" />
  <button id="promo-apply-btn" style="padding: 9px 15px; border-radius: 6px; border: none; background-color: #4CAF50; color: white; cursor: pointer; margin-left: 5px;">Appliquer</button>
  <div id="promo-message" style="margin-top: 8px; color: green; font-weight: bold;"></div>
</div>
<script>
  const clickButton = document.getElementById('click-button');
  const statusEl = document.getElementById('status');
  const promoInput = document.getElementById('promo-code-input');
  const promoApplyBtn = document.getElementById('promo-apply-btn');
  const promoMessage = document.getElementById('promo-message');
  const chestsContainer = document.getElementById('chests-container');
  const shopContainer = document.getElementById('shop-container');
  const leaderboardList = document.getElementById('leaderboard-list');
  const resetLeaderboardBtn = document.getElementById('reset-leaderboard');
  const tutorialToggle = document.getElementById('tutorial-toggle');
  const tutorial = document.getElementById('tutorial');

  let points = 0;
  let baseClickValue = 1;
  let upgradeLevel = 0;
  let upgradeCost = 100;
  let multiplier = 1;
  let currentReward = null;
  let lastGrayReward = localStorage.getItem('lastGrayReward') || null;
  const multiplierByLevel = [5, 4, 3, 2, 1.2];
  const commonColors = ['red', 'yellow', 'blue'];
  const emojis = ['üòä', 'üò¢', 'üòÇ'];
  const CHEST_COOLDOWN_HOURS = 8;
  const baseChestGoldCost = 1000000;
  let chestGoldCost = baseChestGoldCost;

  const soundEffects = {
    gun: 'https://actions.google.com/sounds/v1/weapons/shotgun_blast.ogg',
    cash: 'https://actions.google.com/sounds/v1/cash_register/cash_register.ogg',
    coin: 'https://actions.google.com/sounds/v1/coins/coin_drop.ogg'
  };

  const AudioContext = window.AudioContext || window.webkitAudioContext;
  const audioCtx = new AudioContext();

  function playTone(freq, duration) {
    const osc = audioCtx.createOscillator();
    const gain = audioCtx.createGain();
    osc.connect(gain);
    gain.connect(audioCtx.destination);
    osc.frequency.value = freq;
    osc.type = 'sine';
    osc.start();
    gain.gain.setValueAtTime(0.1, audioCtx.currentTime);
    gain.gain.exponentialRampToValueAtTime(0.00001, audioCtx.currentTime + duration / 1000);
    osc.stop(audioCtx.currentTime + duration / 1000);
  }

  function calculateUpgradeCost(level) {
    if(level === 0) return 100;
    return Math.floor(100 * Math.pow(1.5 + level/10, level));
  }

  function getUpgradeMultiplier() {
    if(upgradeLevel < multiplierByLevel.length) {
      return multiplierByLevel[upgradeLevel];
    }
    return 1.2;
  }

  function getClickValue() {
    let baseValue = baseClickValue * multiplier * getUpgradeMultiplier();
    if(autoclickerActive) {
      baseValue *= autoClickerMultiplier;
    }
    return baseValue;
  }

  function updateUI() {
    document.getElementById('score').textContent = 'Points: ' + Math.floor(points);
    upgradeCost = calculateUpgradeCost(upgradeLevel);
    document.getElementById('upgrade-info').textContent = `Am√©lioration: co√ªt ${upgradeCost} points (niveau ${upgradeLevel + 1}, multiplicateur x${getUpgradeMultiplier().toFixed(2)})`;
    updateClickButton();
  }

  function updateClickButton() {
    const clickValue = getClickValue();
    clickButton.textContent = `+${clickValue.toFixed(0)} pts`;
  }

  function animateButtonPress() {
    clickButton.classList.remove('press-animate');
    void clickButton.offsetWidth;
    clickButton.classList.add('press-animate');
  }

  function handleButtonClick() {
    points += getClickValue();
    updateUI();
    animateButtonPress();
    if(clickButton.style.backgroundColor.includes('f1c40f')){
      const audio = new Audio(soundEffects.coin);
      audio.volume = 0.4;
      audio.play();
    }
  }

  // Chest functions
  function canOpenGrayChest() {
    const lastGrayChestOpen = localStorage.getItem('lastGrayChestOpen');
    if(!lastGrayChestOpen) return true;
    const lastTime = new Date(lastGrayChestOpen).getTime();
    return (Date.now() - lastTime) > CHEST_COOLDOWN_HOURS * 3600000;
  }

  function pickNewGrayReward() {
    let options = commonColors.filter(color => color !== lastGrayReward);
    const choice = options[Math.floor(Math.random() * options.length)];
    lastGrayReward = choice;
    localStorage.setItem('lastGrayReward', lastGrayReward);
    return choice;
  }

  function createGrayChest() {
    const chest = document.createElement('button');
    chest.classList.add('chest-button', 'chest-gray');
    chest.textContent = 'Commun';
    chest.title = 'Coffre gris (commun) - ouvre toutes les 8h';
    chest.disabled = !canOpenGrayChest();
    if(chest.disabled){
      chest.style.opacity = '0.6';
      chest.title += ' (En cooldown)';
    }
    chest.onclick = () => {
      if(!canOpenGrayChest()) {
        alert('Coffre en cooldown, veuillez patienter.');
        return;
      }
      openGrayChest(chest);
    };
    return chest;
  }

  function openGrayChest(chest) {
    resetRewards();
    multiplier = 1;
    currentReward = 'color';
    const color = pickNewGrayReward();
    chest.className = 'chest-button';
    chest.textContent = '';
    chest.style.backgroundColor = color;
    chest.title = 'Bouton commun ' + color;
    clickButton.style.backgroundColor = color;
    clickButton.onclick = handleButtonClick;
    localStorage.setItem('lastGrayChestOpen', new Date().toISOString());
    updateUI();
    statusEl.textContent = `Coffre gris ouvert : bouton ${color}`;
    chest.disabled = true;
    chest.style.opacity = 0.6;
  }

  // Shop buttons creation and purchase
  function createShopButton(colorClass, cost, labelText, onPurchase){
    const btn = document.createElement('button');
    btn.classList.add('chest-button', colorClass);
    btn.textContent = `${labelText} (${cost} pts)`;
    btn.title = `Co√ªt: ${cost} points`;
    btn.onclick = () => {
      if(points < cost){
        alert(`Pas assez de points pour acheter ${labelText}`);
        return;
      }
      if(currentReward && (currentReward === 'color' || currentReward === 'emoji' || currentReward === 'multiplier')){
        alert('Vous avez une r√©compense incompatible active, r√©initialisez-la avant.');
        return;
      }
      points -= cost;
      onPurchase();
      updateUI();
    };
    return btn;
  }

  function addEmojiReward(){
    resetRewards();
    currentReward='emoji';
    const emojiBtn=document.createElement('button');
    emojiBtn.classList.add('chest-button','chest-green');
    emojiBtn.textContent=emojis[Math.floor(Math.random()*emojis.length)];
    emojiBtn.title='Bouton emoji';
    emojiBtn.onclick=handleButtonClick;
    chestsContainer.appendChild(emojiBtn);
    statusEl.textContent='Bouton emoji activ√©';
  }

  function addMusicReward(){
    resetRewards();
    currentReward='music';
    const musicBtn=document.createElement('button');
    musicBtn.classList.add('chest-button','chest-blue');
    musicBtn.textContent='‚ô™';
    musicBtn.title='Bouton musique';
    musicBtn.onclick=()=>{handleButtonClick(); playRandomNote();};
    chestsContainer.appendChild(musicBtn);
    statusEl.textContent='Bouton musique activ√©';
  }

  function addSoundReward(){
    resetRewards();
    currentReward='sound';
    const soundBtn=document.createElement('button');
    soundBtn.classList.add('chest-button','chest-purple');
    soundBtn.textContent='üí•';
    soundBtn.title='Bouton son';
    soundBtn.onclick=()=>{handleButtonClick(); playRandomSound();};
    chestsContainer.appendChild(soundBtn);
    statusEl.textContent='Bouton son activ√©';
  }

  function addMultiplierReward(){
    if(points < chestGoldCost){
      alert('Pas assez de points pour acheter le Coffre Dor√©.');
      return;
    }
    points -= chestGoldCost;
    resetRewards();
    currentReward = 'multiplier';
    multiplier = 3;
    statusEl.textContent = 'Multiplicateur x3 activ√© !';
    updateUI();
    updateLeaderboard();
  }

  function updateChestGoldButton() {
    const buttons = Array.from(shopContainer.getElementsByClassName('chest-gold'));
    buttons.forEach(btn=>{
      btn.textContent = `Coffre Dor√© (x3) (${chestGoldCost} pts)`;
      btn.title = `Co√ªt: ${chestGoldCost} points (peut √™tre r√©duit par promo)`;
    });
  }

  const musicFrequencies = {do:261.63, re:293.66, mi:329.63};

  function playRandomNote(){
    const notes=['do','re','mi'];
    const note=notes[Math.floor(Math.random()*notes.length)];
    playTone(musicFrequencies[note], 500);
  }

  function playRandomSound(){
    const sounds=[soundEffects.gun, soundEffects.cash];
    const audio=new Audio(sounds[Math.floor(Math.random()*sounds.length)]);
    audio.play();
  }

  // Color buttons shop
  const buttonColors = {
    violet: '#8e44ad',
    rose: '#e91e63',
    orange: '#ff9800',
    vert: '#4caf50',
    marron: '#795548',
    ciel: '#87ceeb',
    dore: '#f1c40f'
  };

  function applyButtonColor(colorHex) {
    clickButton.style.backgroundColor = colorHex;
  }

  function buyColor(colorKey) {
    if (!(colorKey in buttonColors)) return;
    if(points < 5000){
      alert('Pas assez de points pour acheter cette couleur.');
      return;
    }
    if(currentReward && (currentReward === 'color' || currentReward === 'emoji' || currentReward === 'multiplier')){
      alert('Une r√©compense incompatible est active, r√©initialisez-la avant.');
      return;
    }
    points -= 5000;
    resetRewards();
    currentReward = 'color';
    multiplier = 1;
    applyButtonColor(buttonColors[colorKey]);
    if(colorKey === 'dore') {
      clickButton.onclick = () => {
        handleButtonClick();
        const audio = new Audio(soundEffects.coin);
        audio.volume=0.4;
        audio.play();
      };
    } else {
      clickButton.onclick = handleButtonClick;
    }
    updateUI();
  }

  function buyAllColorsPack() {
    if(points < 27000){
      alert('Pas assez de points pour acheter ce pack.');
      return;
    }
    if(currentReward && (currentReward === 'color' || currentReward === 'emoji' || currentReward === 'multiplier')){
      alert('R√©compense incompatible active, r√©initialisez avant.');
      return;
    }
    points -= 27000;
    resetRewards();
    currentReward = 'color';
    multiplier = 1;
    clickButton.style.background = 'linear-gradient(45deg, violet, pink, orange, green, brown, deepskyblue)';
    clickButton.onclick = handleButtonClick;
    updateUI();
  }

  function addColorsShopButtons() {
    shopContainer.appendChild(createShopButton('', 5000, 'Violet', () => buyColor('violet')));
    shopContainer.appendChild(createShopButton('', 5000, 'Rose', () => buyColor('rose')));
    shopContainer.appendChild(createShopButton('', 5000, 'Orange', () => buyColor('orange')));
    shopContainer.appendChild(createShopButton('', 5000, 'Vert', () => buyColor('vert')));
    shopContainer.appendChild(createShopButton('', 5000, 'Marron', () => buyColor('marron')));
    shopContainer.appendChild(createShopButton('', 5000, 'Bleu ciel', () => buyColor('ciel')));
    shopContainer.appendChild(createShopButton('', 5000, 'Dor√©', () => buyColor('dore')));
    shopContainer.appendChild(createShopButton('', 27000, 'Pack toutes couleurs', buyAllColorsPack));
  }

  // Promo codes
  const validPromoCodes = {
    'FIVESTARSFORTHEGAME': { type: 'points', amount: 5000000 },
    '01KAIS': { type: 'autoclicker', durationDays: 30 },
    'THEBESTGAMEOFTHEWORLD': { type: 'combo' }
  };
  let promoUsedCodes = JSON.parse(localStorage.getItem('promoUsedCodes')) || {};

  promoApplyBtn.addEventListener('click', () => {
    const codeRaw = promoInput.value.trim();
    const code = codeRaw.toUpperCase();
    if(!code) {
      promoMessage.style.color = 'red';
      promoMessage.textContent = "Veuillez entrer un code.";
      return;
    }
    if(promoUsedCodes[code]) {
      promoMessage.style.color = 'red';
      promoMessage.textContent = `Le code ${codeRaw} a d√©j√† √©t√© utilis√©.`;
      return;
    }
    if(validPromoCodes[code]){
      applyPromoCodeEffects(code);
      promoMessage.style.color = 'green';
      promoMessage.textContent = `Code ${codeRaw} appliqu√© avec succ√®s !`;
      promoInput.disabled = true;
      promoApplyBtn.disabled = true;
      promoUsedCodes[code] = true;
      localStorage.setItem('promoUsedCodes', JSON.stringify(promoUsedCodes));
    } else {
      promoMessage.style.color = 'red';
      promoMessage.textContent = "Code invalide.";
    }
  });

  function applyPromoCodeEffects(code) {
    const info = validPromoCodes[code];
    if(info.type === 'points'){
      points += info.amount;
      updateUI();
    } else if(info.type === 'autoclicker'){
      activateAutoclickerDays(info.durationDays);
    } else if(info.type === 'combo'){
      points += 1000000;
      activateAutoclickerDays(7);
      chestGoldCost = baseChestGoldCost / 2;
      updateChestGoldButton();
      updateUI();
    }
  }

  function activateAutoclickerDays(days){
    autoclickerActive = true;
    autoclickerEndTime = Date.now() + days*24*60*60*1000;
    localStorage.setItem('autoclickerEndTime', new Date(autoclickerEndTime).toISOString());
    autoClickerMultiplier = 2;
    alert(`Auto-Clicker activ√© pendant ${days} jour${days>1?'s':''} avec multiplicateur x2! Maintenez le bouton pour cliquer automatiquement.`);
  }

  // Leaderboard management
  function updateLeaderboard(){
    if(points<=0) return;
    let leaderboard=JSON.parse(localStorage.getItem('leaderboard')) || [];
    leaderboard.push(points);
    leaderboard.sort((a,b)=>b-a);
    if(leaderboard.length>5) leaderboard=leaderboard.slice(0,5);
    localStorage.setItem('leaderboard',JSON.stringify(leaderboard));
    renderLeaderboard();
  }

  function renderLeaderboard(){
    const leaderboard=JSON.parse(localStorage.getItem('leaderboard')) || [];
    leaderboardList.innerHTML='';
    if(!leaderboard.length){
      leaderboardList.innerHTML='<li>Aucun score enregistr√©</li>';
      return;
    }
    leaderboard.forEach((score,i)=>{
      const li=document.createElement('li');
      li.textContent=`${i+1}. ${Math.floor(score)} points`;
      leaderboardList.appendChild(li);
    });
  }

  resetLeaderboardBtn.addEventListener('click',()=>{
    localStorage.removeItem('leaderboard');
    renderLeaderboard();
  });

  // Button animations and events
  clickButton.onclick = handleButtonClick;
  clickButton.addEventListener('click', handleButtonClick);

  // AutoClick setup
  function clearAutoclickerInterval() {
    if(autoclickerInterval){
      clearInterval(autoclickerInterval);
      autoclickerInterval = null;
    }
  }

  function setupAutoclickEvents() {
    clickButton.addEventListener('mousedown', () => {
      if(!autoclickerActive || autoclickerInterval) return;
      autoclickerInterval = setInterval(handleButtonClick, AUTOCLICKER_RATE_MS);
    });
    clickButton.addEventListener('mouseup', clearAutoclickerInterval);
    clickButton.addEventListener('mouseleave', clearAutoclickerInterval);
    clickButton.addEventListener('touchstart', e => {
      if(!autoclickerActive || autoclickerInterval) return;
      autoclickerInterval = setInterval(handleButtonClick, AUTOCLICKER_RATE_MS);
      e.preventDefault();
    });
    clickButton.addEventListener('touchend', clearAutoclickerInterval);
    clickButton.addEventListener('touchcancel', clearAutoclickerInterval);
  }

  function updateAutoclickerStatus() {
    if(Date.now() < autoclickerEndTime) {
      autoclickerActive = true;
    } else {
      autoclickerActive = false;
      autoClickerMultiplier = 1;
      localStorage.removeItem('autoclickerEndTime');
      clearAutoclickerInterval();
    }
  }

  // PayPal Buttons
  function setupPayPalButtons(){
    // G√©n√©rateur automatique 5‚Ç¨
    paypal.Buttons({
      style: { layout: 'horizontal', color: 'gold', shape: 'rect', label: 'paypal' },
      createOrder: (data, actions) => actions.order.create({
        purchase_units: [{ amount: { value: '5.00' } }]
      }),
      onApprove: (data, actions) => actions.order.capture().then(() => {
        showMessage('G√©n√©rateur automatique achet√© !');
        startGenerator();
      })
    }).render(document.getElementById('paypal-button-container'));

    // Auto-clicker 3‚Ç¨ avec x2 points
    const autoClickDiv = document.createElement('div');
    shopContainer.appendChild(autoClickDiv);
    paypal.Buttons({
      style: { layout: 'horizontal', color: 'gold', shape: 'rect', label: 'paypal' },
      createOrder: (data, actions) => actions.order.create({
        purchase_units: [{ amount: { value: '3.00' } }]
      }),
      onApprove: (data, actions) => actions.order.capture().then(() => {
        autoclickerActive = true;
        autoclickerEndTime = Date.now() + 7*24*60*60*1000;
        localStorage.setItem('autoclickerEndTime', new Date(autoclickerEndTime).toISOString());
        autoClickerMultiplier = 2;
        showMessage('Auto-Clicker activ√© (x2 points) pour 1 semaine !');
      })
    }).render(autoClickDiv);
  }

  function showMessage(message, isError=false){
    statusEl.style.color = isError ? 'red' : 'green';
    statusEl.textContent = message;
    setTimeout(()=>{statusEl.textContent='';}, 3000);
  }

  function resetRewards() {
    multiplier = 1;
    currentReward = null;
    clickButton.style.backgroundColor = '#bbb';
    clickButton.style.background = '';
    clickButton.onclick = handleButtonClick;
    statusEl.textContent = '';
  }

  function startGenerator() {
    if(generatorActive) return;
    generatorActive = true;
    localStorage.setItem('generatorActive','true');
    setInterval(() => {
      points += generatorRate * getUpgradeMultiplier() * autoClickerMultiplier;
      updateUI();
    }, 60000);
  }

  window.onload = () => {
    updateUI();
    setupAutoclickEvents();
    updateAutoclickerStatus();
    setupPayPalButtons();
    renderLeaderboard();
  };

  tutorialToggle.onclick = () => {
    tutorial.style.display = (tutorial.style.display === 'block') ? 'none' : 'block';
  };
</script>
</body>
</html>
